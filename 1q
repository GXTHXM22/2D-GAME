#include <SDL2/SDL.h>
#include <SDL2/SDL_ttf.h>
#include <SDL2/SDL_image.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

#define SCREEN_WIDTH 500
#define SCREEN_HEIGHT 800
#define TRUCK_SPEED 4
#define ROAD_SCROLL_SPEED 1
#define ROAD_LEFT_BOUND 80
#define ROAD_RIGHT_BOUND 470
#define OBSTACLE_COUNT 4
#define MIN_OBSTACLE_GAP 500
#define LANE_WIDTH 150

void renderText(SDL_Renderer *renderer, TTF_Font *font, const char *text, SDL_Color textColor, SDL_Color outlineColor, int x, int y) {
    if (!font) return;
    TTF_SetFontOutline(font, 2);
    SDL_Surface *outlineSurface = TTF_RenderText_Solid(font, text, outlineColor);
    SDL_Texture *outlineTexture = SDL_CreateTextureFromSurface(renderer, outlineSurface);
    SDL_Rect outlineRect = {x - 2, y - 2, outlineSurface->w, outlineSurface->h};
    SDL_RenderCopy(renderer, outlineTexture, NULL, &outlineRect);
    SDL_FreeSurface(outlineSurface);
    SDL_DestroyTexture(outlineTexture);
    
    TTF_SetFontOutline(font, 0);
    SDL_Surface *textSurface = TTF_RenderText_Solid(font, text, textColor);
    SDL_Texture *textTexture = SDL_CreateTextureFromSurface(renderer, textSurface);
    SDL_Rect textRect = {x, y, textSurface->w, textSurface->h};
    SDL_RenderCopy(renderer, textTexture, NULL, &textRect);
    SDL_FreeSurface(textSurface);
    SDL_DestroyTexture(textTexture);
}

void resetGame(bool *gameStarted, bool *collision, SDL_Rect *truckRect, SDL_Rect obstacles[]) {
    *gameStarted = false;
    *collision = false;
    truckRect->x = SCREEN_WIDTH /2-32;
    truckRect->y = SCREEN_HEIGHT - 100;
    int lastLane = -1;
    for (int i = 0; i < OBSTACLE_COUNT; i++) {
        int lane = (lastLane == 0) ? 1 : 0;
        obstacles[i].x = ROAD_LEFT_BOUND + (lane * LANE_WIDTH);
        obstacles[i].y = -(i * MIN_OBSTACLE_GAP) - rand() % SCREEN_HEIGHT;
        obstacles[i].w = 64;
        obstacles[i].h = 64;
        lastLane = lane;
    }
}

int main(int argc, char *argv[]) {
    SDL_Init(SDL_INIT_VIDEO);
    TTF_Init();
    IMG_Init(IMG_INIT_PNG | IMG_INIT_JPG);
    
    SDL_Window *window = SDL_CreateWindow("Game Window", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    SDL_Renderer *renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    
    SDL_Surface *bgSurface = IMG_Load("road.png");
    SDL_Texture *bgTexture = SDL_CreateTextureFromSurface(renderer, bgSurface);
    SDL_FreeSurface(bgSurface);
    
    SDL_Surface *truckSurface = IMG_Load("truck.png");
    if (!truckSurface) {
    printf("Error loading truck image: %s\n", IMG_GetError());
    }
    SDL_Texture *truckTexture = SDL_CreateTextureFromSurface(renderer, truckSurface);
    SDL_FreeSurface(truckSurface);

    SDL_Rect truckRect = {SCREEN_WIDTH / 2 - 32, SCREEN_HEIGHT - 100, 64, 128};

    // Ensure the truck is rendered
    SDL_SetTextureBlendMode(truckTexture, SDL_BLENDMODE_BLEND);
    SDL_RenderCopy(renderer, truckTexture, NULL, &truckRect);
    
    SDL_Surface *obstacleSurface = IMG_Load("obstacle.png");
    SDL_Texture *obstacleTexture = SDL_CreateTextureFromSurface(renderer, obstacleSurface);
    SDL_FreeSurface(obstacleSurface);
    
    TTF_Font *font = TTF_OpenFont("arcade.ttf", 48);
    SDL_Color textColor = {255, 255, 255};
    SDL_Color outlineColor = {0, 0, 0};
    
    bool running = true;
    bool gameStarted = false;
    bool collision = false;
    SDL_Event event;
    
    
    SDL_Rect obstacles[OBSTACLE_COUNT];
    resetGame(&gameStarted, &collision, &truckRect, obstacles);
    int roadY = 0;
    
    while (running) {
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) running = false;
            if (event.type == SDL_KEYDOWN) {
                if (!gameStarted && event.key.keysym.sym == SDLK_RETURN) gameStarted = true;
                if (collision && event.key.keysym.sym == SDLK_RETURN) resetGame(&gameStarted, &collision, &truckRect, obstacles);
                if (event.key.keysym.sym == SDLK_LEFT && truckRect.x > ROAD_LEFT_BOUND) truckRect.x -= TRUCK_SPEED;
                if (event.key.keysym.sym == SDLK_RIGHT && truckRect.x + truckRect.w < ROAD_RIGHT_BOUND) truckRect.x += TRUCK_SPEED;
            }
        }
        
        if (gameStarted && !collision) {
            roadY += ROAD_SCROLL_SPEED;
            if (roadY >= SCREEN_HEIGHT) roadY = 0;
            
            for (int i = 0; i < OBSTACLE_COUNT; i++) {
                obstacles[i].y += ROAD_SCROLL_SPEED;
                if (obstacles[i].y > SCREEN_HEIGHT) {
                    obstacles[i].y = -MIN_OBSTACLE_GAP - rand() % SCREEN_HEIGHT;
                }
                if (SDL_HasIntersection(&truckRect, &obstacles[i])) {
                    collision = true;
                }
            }
        }
        
        SDL_RenderClear(renderer);
        
        SDL_Rect roadRect1 = {0, roadY - SCREEN_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT};
        SDL_Rect roadRect2 = {0, roadY, SCREEN_WIDTH, SCREEN_HEIGHT};
        SDL_RenderCopy(renderer, bgTexture, NULL, &roadRect1);
        SDL_RenderCopy(renderer, bgTexture, NULL, &roadRect2);
        
        SDL_RenderCopy(renderer, truckTexture, NULL, &truckRect);
        
        for (int i = 0; i < OBSTACLE_COUNT; i++) {
            SDL_RenderCopy(renderer, obstacleTexture, NULL, &obstacles[i]);
        }
        
        if (!gameStarted) renderText(renderer, font, "Hit Enter to Start", textColor, outlineColor, 100, 350);
        if (collision) renderText(renderer, font, "Game Over! Hit Enter to Restart", textColor, outlineColor, 100, 350);
        
        SDL_RenderPresent(renderer);
    }
    
    SDL_DestroyTexture(bgTexture);
    SDL_DestroyTexture(truckTexture);
    SDL_DestroyTexture(obstacleTexture);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    TTF_CloseFont(font);
    TTF_Quit();
    SDL_Quit();
    IMG_Quit();
    
    return 0;
}

